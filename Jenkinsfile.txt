pipeline {
    agent any  // 指定执行节点（any 表示任意可用节点）

    stages {
        // 阶段 1：拉取代码
        stage('Checkout') {
            steps {
                git(
                    url: 'git@github.com:seldon98/autotest_guardian.git',
                    branch: 'master',
                    credentialsId: 'git'  // 提前在 Jenkins 中配置的凭证 ID
                )
            }
        }

        // 阶段 2：构建代码（示例为 Maven）
        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests'  // 或使用 gradle、npm 等命令
            }
        }

        // 阶段 3：归档成品（可选）
        stage('Archive') {
            steps {
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true  // 保存 JAR 文件
            }
        }

        // 阶段 4：自定义文件名并移动文件
        stage('Customize Output') {
            steps {
                sh '''
                    // 示例：重命名 JAR 文件并移动到指定目录
                    mkdir -p /opt/builds
                    cp target/*.jar /opt/builds/myapp-${BUILD_NUMBER}.jar
                    echo "生成文件：/opt/builds/myapp-${BUILD_NUMBER}.jar"
                '''
            }
        }
    }

    // 后置操作（可选）
    post {
        success {
            slackSend channel: '#dev', message: "构建成功: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
        }
        failure {
            emailext body: '构建失败，请检查日志', subject: '构建通知', to: 'admin@example.com'
        }
    }
}
